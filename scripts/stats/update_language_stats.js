#!/usr/bin/env node
import { writeFile } from 'node:fs/promises'
import { activeLanguages } from '#assets/active_languages'
import { getLangDefaultRegion } from '#scripts/stats/lib/get_lang_default_region'
import { getLangKeysCount } from '#scripts/stats/lib/get_lang_keys_count'
import { fileURLToPath } from 'node:url'
import { relative } from 'node:path'

const completionData = {}

for (const lang of activeLanguages) {
  completionData[lang] = await getLangKeysCount(lang)
}

const languagesData = {}

const { en: enKeysNum } = completionData

function getLangCompletion (langKeysNum) {
  const completion = Math.round((langKeysNum / enKeysNum) * 100)
  // When keys are deleted in the English version but not yet uploaded,
  // some language may appear with more than 100% completion
  return Math.min(completion, 100)
}

for (const [ lang, keysNum ] of Object.entries(completionData)) {
  languagesData[lang] = {
    completion: getLangCompletion(keysNum),
    defaultRegion: await getLangDefaultRegion(lang),
  }
}

const formatAsJs = json => json.replace(/"(\w+)": /g, '$1: ').replaceAll('"', "'")

const json = JSON.stringify(languagesData, null, 2)
const relativeScriptPath = relative(process.cwd(), fileURLToPath(import.meta.url))
const file = `// Generated by ${relativeScriptPath}@inventaire-i18n
export default ${formatAsJs(json)}`

// TODO: remove js file once the client typescript branch has been merged
await writeFile('./dist/languages_data.js', file)
await writeFile('./dist/languages_data.ts', file + ' as const')
